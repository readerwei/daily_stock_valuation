# This script executes daily trades based on signals generated by `dailyReport.py`.
# It connects to the Alpaca trading API to fetch account information, place orders,
# and manage positions.

import pandas as pd
import alpaca_trade_api as tradeapi
import yaml
import os

# Load Alpaca API credentials from a YAML file and set them as environment variables.
# This ensures secure handling of API keys.
with open("/home/wei/Documents/zipline-yaml/zipline-trader.yaml", mode='r') as f:
    o = yaml.safe_load(f)
    os.environ["APCA_API_KEY_ID"] = o["alpaca"]["key_id"]
    os.environ["APCA_API_SECRET_KEY"] = o["alpaca"]["secret"]
    os.environ["APCA_API_BASE_URL"] = o["alpaca"]["base_url"]

# Initialize the Alpaca REST API client.
api = tradeapi.REST()

# Fetch account details to get available cash and current positions.
acct = api.get_account()
cash_avail = float(acct.cash)
positions = api.list_positions()

# Store current positions in a dictionary for easy lookup.
pos = dict()
for item in positions:
    pos[item.symbol] = [int(item.qty), float(item.unrealized_plpc)]

def order(symbol, side, qty, price):
    """Submits a limit order to the Alpaca trading platform."""
    order = api.submit_order(
            symbol=symbol,
            qty=qty,
            side=side,
            type='limit',
            time_in_force='day',
            limit_price=price,
            extended_hours=True,
    )
    return order    
    
# Cancel all open orders before placing new ones to avoid conflicts.
api.cancel_all_orders()
    
# Load the daily trading signals from the `daily.pkl` file.
result= pd.read_pickle("./daily.pkl")

# Separate buy and sell signals. Assuming the top 5 are buys and bottom 5 are sells.
buys = result.iloc[:5]
sells = result.iloc[-5:]

# Process sell signals:
# If an equity has an RSI above 80 (overbought) and is profitable (unrealized P/L >= 5%),
# place a limit sell order at the upper Bollinger Band price.
for name, equity_sell in sells.iterrows():
    if equity_sell.RSI > 80:
        if name.symbol in pos.keys():
            if pos[name.symbol][1] >= 0.05:
                print(name.symbol)
                qty = pos[name.symbol][0]
                price = equity_sell.Bollinger[2]
                print(price)
                submitted = order(name.symbol, 'sell', qty, price)
                
# Process buy signals:
# If an equity has an RSI below 20 (oversold), calculate the quantity to buy
# based on available cash and place a limit buy order at the lower Bollinger Band price.
for name, equity_buy in buys.iterrows():
    if equity_buy.RSI < 20: 
        # Allocate 1/10th of available cash for each buy order.
        qty = int(cash_avail/10/equity_buy.close)
        price = equity_buy.Bollinger[0]
        submitted = order(name.symbol, 'buy', qty, price)
        
        
        